\doxysection{src/\+Deque.h File Reference}
\hypertarget{Deque_8h}{}\label{Deque_8h}\index{src/Deque.h@{src/Deque.h}}


Header file for a deque.  


{\ttfamily \#include $<$stdbool.\+h$>$}\newline
{\ttfamily \#include "{}pcb.\+h"{}}\newline
Include dependency graph for Deque.\+h\+:
% FIG 0
This graph shows which files directly or indirectly include this file\+:
% FIG 1
\doxysubsubsection*{Classes}
\begin{DoxyCompactItemize}
\item 
struct \mbox{\hyperlink{structdq__node__st}{dq\+\_\+node\+\_\+st}}
\begin{DoxyCompactList}\small\item\em Structure representing a node in a doubly-\/linked deque. \end{DoxyCompactList}\item 
struct \mbox{\hyperlink{structdq__st}{dq\+\_\+st}}
\begin{DoxyCompactList}\small\item\em Structure representing a deque. \end{DoxyCompactList}\end{DoxyCompactItemize}
\doxysubsubsection*{Typedefs}
\begin{DoxyCompactItemize}
\item 
typedef struct \mbox{\hyperlink{structdq__node__st}{dq\+\_\+node\+\_\+st}} \mbox{\hyperlink{Deque_8h_a26579b27a5163d1424fa4adde69119c6}{Deque\+Node}}
\begin{DoxyCompactList}\small\item\em Structure representing a node in a doubly-\/linked deque. \end{DoxyCompactList}\item 
typedef struct \mbox{\hyperlink{structdq__st}{dq\+\_\+st}} \mbox{\hyperlink{Deque_8h_ad99aab737338cb287946d833f4c0337f}{Deque}}
\begin{DoxyCompactList}\small\item\em Structure representing a deque. \end{DoxyCompactList}\end{DoxyCompactItemize}
\doxysubsubsection*{Functions}
\begin{DoxyCompactItemize}
\item 
\mbox{\hyperlink{Deque_8h_ad99aab737338cb287946d833f4c0337f}{Deque}} \texorpdfstring{$\ast$}{*} \mbox{\hyperlink{Deque_8h_a9b7d0afc2e965064933f102857da269a}{Deque\+\_\+\+Allocate}} (void)
\begin{DoxyCompactList}\small\item\em Allocates space for a Deque and its variables. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{Deque_8h_a918476fbbe0d9a1b05783193777a4468}{Deque\+\_\+\+Free}} (\mbox{\hyperlink{Deque_8h_ad99aab737338cb287946d833f4c0337f}{Deque}} \texorpdfstring{$\ast$}{*}dq)
\begin{DoxyCompactList}\small\item\em Frees the memory allocated for a Deque. \end{DoxyCompactList}\item 
int \mbox{\hyperlink{Deque_8h_afe8745f820b040a9f8ce5517abb3e57b}{Deque\+\_\+\+Size}} (\mbox{\hyperlink{Deque_8h_ad99aab737338cb287946d833f4c0337f}{Deque}} \texorpdfstring{$\ast$}{*}dq)
\begin{DoxyCompactList}\small\item\em Returns the number of elements in the deque. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{Deque_8h_a4fef2419b522f7aafbd2bb21a9cfa70a}{Deque\+\_\+\+Push\+\_\+\+Front}} (\mbox{\hyperlink{Deque_8h_ad99aab737338cb287946d833f4c0337f}{Deque}} \texorpdfstring{$\ast$}{*}dq, \mbox{\hyperlink{structpcb__struct}{PCB}} \texorpdfstring{$\ast$}{*}payload)
\begin{DoxyCompactList}\small\item\em Adds a new element to the front of the Deque. \end{DoxyCompactList}\item 
bool \mbox{\hyperlink{Deque_8h_a74629a8f304fe6bf9aa797b6f180ecfa}{Deque\+\_\+\+Pop\+\_\+\+Front}} (\mbox{\hyperlink{Deque_8h_ad99aab737338cb287946d833f4c0337f}{Deque}} \texorpdfstring{$\ast$}{*}dq, \mbox{\hyperlink{structpcb__struct}{PCB}} \texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}payload\+\_\+ptr)
\begin{DoxyCompactList}\small\item\em Pops an element from the front of the deque. \end{DoxyCompactList}\item 
bool \mbox{\hyperlink{Deque_8h_add49ac1831d256f03bd8ef64e875fd58}{Deque\+\_\+\+Pop\+\_\+\+PID}} (\mbox{\hyperlink{Deque_8h_ad99aab737338cb287946d833f4c0337f}{Deque}} \texorpdfstring{$\ast$}{*}dq, pid\+\_\+t pid\+\_\+to\+\_\+pop)
\begin{DoxyCompactList}\small\item\em Pops an element with a specific PID from the deque. \end{DoxyCompactList}\item 
bool \mbox{\hyperlink{Deque_8h_a1d6950800a9712338421c35404bcc21d}{Deque\+\_\+\+Peek\+\_\+\+Front}} (\mbox{\hyperlink{Deque_8h_ad99aab737338cb287946d833f4c0337f}{Deque}} \texorpdfstring{$\ast$}{*}dq, \mbox{\hyperlink{structpcb__struct}{PCB}} \texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}payload\+\_\+ptr)
\begin{DoxyCompactList}\small\item\em Peeks at the element at the front of the deque. \end{DoxyCompactList}\item 
void \mbox{\hyperlink{Deque_8h_a6d60d3cadeb28a1f88294247bdbaf545}{Deque\+\_\+\+Push\+\_\+\+Back}} (\mbox{\hyperlink{Deque_8h_ad99aab737338cb287946d833f4c0337f}{Deque}} \texorpdfstring{$\ast$}{*}dq, \mbox{\hyperlink{structpcb__struct}{PCB}} \texorpdfstring{$\ast$}{*}payload)
\begin{DoxyCompactList}\small\item\em Pushes a new element to the end of the deque. \end{DoxyCompactList}\item 
bool \mbox{\hyperlink{Deque_8h_ad49adcd7fe5724b3dfa14a153dedb6ff}{Deque\+\_\+\+Pop\+\_\+\+Back}} (\mbox{\hyperlink{Deque_8h_ad99aab737338cb287946d833f4c0337f}{Deque}} \texorpdfstring{$\ast$}{*}dq, \mbox{\hyperlink{structpcb__struct}{PCB}} \texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}payload\+\_\+ptr)
\begin{DoxyCompactList}\small\item\em Pops an element from the end of the deque. \end{DoxyCompactList}\item 
bool \mbox{\hyperlink{Deque_8h_a4a48da547bf25f56e55780b0477b592f}{Deque\+\_\+\+Peek\+\_\+\+Back}} (\mbox{\hyperlink{Deque_8h_ad99aab737338cb287946d833f4c0337f}{Deque}} \texorpdfstring{$\ast$}{*}dq, \mbox{\hyperlink{structpcb__struct}{PCB}} \texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}payload\+\_\+ptr)
\begin{DoxyCompactList}\small\item\em Peeks at the element at the back of the deque. \end{DoxyCompactList}\item 
bool \mbox{\hyperlink{Deque_8h_ad418721877c1f156176dda9f6512da8c}{Deque\+\_\+\+Pop\+\_\+\+Pcb}} (\mbox{\hyperlink{Deque_8h_ad99aab737338cb287946d833f4c0337f}{Deque}} \texorpdfstring{$\ast$}{*}dq, \mbox{\hyperlink{Deque_8h_a26579b27a5163d1424fa4adde69119c6}{Deque\+Node}} \texorpdfstring{$\ast$}{*}pcb)
\begin{DoxyCompactList}\small\item\em Pops a specified PCB node from the deque. \end{DoxyCompactList}\end{DoxyCompactItemize}


\doxysubsection{Detailed Description}
Header file for a deque. 

This file defines structures and functions for a generic deque. 

\doxysubsection{Typedef Documentation}
\Hypertarget{Deque_8h_ad99aab737338cb287946d833f4c0337f}\label{Deque_8h_ad99aab737338cb287946d833f4c0337f} 
\index{Deque.h@{Deque.h}!Deque@{Deque}}
\index{Deque@{Deque}!Deque.h@{Deque.h}}
\doxysubsubsection{\texorpdfstring{Deque}{Deque}}
{\footnotesize\ttfamily typedef struct \mbox{\hyperlink{structdq__st}{dq\+\_\+st}} \mbox{\hyperlink{Deque_8h_ad99aab737338cb287946d833f4c0337f}{Deque}}}



Structure representing a deque. 

This structure contains metadata about the deque, including the number of elements, a pointer to the beginning of the deque ({\ttfamily front}), and a pointer to the end of the deque ({\ttfamily back}).


\begin{DoxyParams}{Parameters}
{\em num\+\_\+elements} & The number of elements in the deque. \\
\hline
{\em front} & Pointer to the beginning of the deque, or NULL if the deque is empty. \\
\hline
{\em back} & Pointer to the end of the deque, or NULL if the deque is empty. \\
\hline
\end{DoxyParams}
\Hypertarget{Deque_8h_a26579b27a5163d1424fa4adde69119c6}\label{Deque_8h_a26579b27a5163d1424fa4adde69119c6} 
\index{Deque.h@{Deque.h}!DequeNode@{DequeNode}}
\index{DequeNode@{DequeNode}!Deque.h@{Deque.h}}
\doxysubsubsection{\texorpdfstring{DequeNode}{DequeNode}}
{\footnotesize\ttfamily typedef struct \mbox{\hyperlink{structdq__node__st}{dq\+\_\+node\+\_\+st}} \mbox{\hyperlink{Deque_8h_a26579b27a5163d1424fa4adde69119c6}{Deque\+Node}}}



Structure representing a node in a doubly-\/linked deque. 

This structure defines a node in a doubly-\/linked deque, containing a pointer to a Process Control Block (PCB) representing the current job, and pointers to the next and previous nodes in the deque.


\begin{DoxyParams}{Parameters}
{\em pcb} & Pointer to the Process Control Block (PCB) representing the current job. \\
\hline
{\em next} & Pointer to the next node in the deque, or NULL if this is the last node. \\
\hline
{\em prev} & Pointer to the previous node in the deque, or NULL if this is the first node. \\
\hline
\end{DoxyParams}


\doxysubsection{Function Documentation}
\Hypertarget{Deque_8h_a9b7d0afc2e965064933f102857da269a}\label{Deque_8h_a9b7d0afc2e965064933f102857da269a} 
\index{Deque.h@{Deque.h}!Deque\_Allocate@{Deque\_Allocate}}
\index{Deque\_Allocate@{Deque\_Allocate}!Deque.h@{Deque.h}}
\doxysubsubsection{\texorpdfstring{Deque\_Allocate()}{Deque\_Allocate()}}
{\footnotesize\ttfamily \mbox{\hyperlink{Deque_8h_ad99aab737338cb287946d833f4c0337f}{Deque}} \texorpdfstring{$\ast$}{*} Deque\+\_\+\+Allocate (\begin{DoxyParamCaption}\item[{void}]{ }\end{DoxyParamCaption})}



Allocates space for a Deque and its variables. 

This function dynamically allocates memory for a Deque structure and its associated variables, including {\ttfamily num\+\_\+elements}, {\ttfamily front}, and {\ttfamily back}. The allocated Deque is initialized with default values.

\begin{DoxyReturn}{Returns}
Deque\texorpdfstring{$\ast$}{*} Pointer to the allocated Deque structure. 
\end{DoxyReturn}
\Hypertarget{Deque_8h_a918476fbbe0d9a1b05783193777a4468}\label{Deque_8h_a918476fbbe0d9a1b05783193777a4468} 
\index{Deque.h@{Deque.h}!Deque\_Free@{Deque\_Free}}
\index{Deque\_Free@{Deque\_Free}!Deque.h@{Deque.h}}
\doxysubsubsection{\texorpdfstring{Deque\_Free()}{Deque\_Free()}}
{\footnotesize\ttfamily void Deque\+\_\+\+Free (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{Deque_8h_ad99aab737338cb287946d833f4c0337f}{Deque}} \texorpdfstring{$\ast$}{*}}]{dq }\end{DoxyParamCaption})}



Frees the memory allocated for a Deque. 

This function frees the memory previously allocated for a Deque structure by {\ttfamily Deque\+\_\+\+Allocate}. After calling this function, it is unsafe to use the deque referenced by the {\ttfamily dq} parameter.


\begin{DoxyParams}{Parameters}
{\em dq} & Pointer to the Deque structure to be freed. \\
\hline
\end{DoxyParams}
\Hypertarget{Deque_8h_a4a48da547bf25f56e55780b0477b592f}\label{Deque_8h_a4a48da547bf25f56e55780b0477b592f} 
\index{Deque.h@{Deque.h}!Deque\_Peek\_Back@{Deque\_Peek\_Back}}
\index{Deque\_Peek\_Back@{Deque\_Peek\_Back}!Deque.h@{Deque.h}}
\doxysubsubsection{\texorpdfstring{Deque\_Peek\_Back()}{Deque\_Peek\_Back()}}
{\footnotesize\ttfamily bool Deque\+\_\+\+Peek\+\_\+\+Back (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{Deque_8h_ad99aab737338cb287946d833f4c0337f}{Deque}} \texorpdfstring{$\ast$}{*}}]{dq,  }\item[{\mbox{\hyperlink{structpcb__struct}{PCB}} \texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}}]{payload\+\_\+ptr }\end{DoxyParamCaption})}



Peeks at the element at the back of the deque. 

This function retrieves the element at the back of the deque referenced by the {\ttfamily dq} parameter. On success, the peeked node\textquotesingle{}s payload is returned through the {\ttfamily payload\+\_\+ptr} parameter.


\begin{DoxyParams}{Parameters}
{\em dq} & Pointer to the Deque structure to peek. \\
\hline
{\em payload\+\_\+ptr} & A return parameter; on success, the peeked node\textquotesingle{}s payload is returned through this parameter. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
bool Returns false on failure (e.\+g., the deque is empty), and true on success. 
\end{DoxyReturn}
\Hypertarget{Deque_8h_a1d6950800a9712338421c35404bcc21d}\label{Deque_8h_a1d6950800a9712338421c35404bcc21d} 
\index{Deque.h@{Deque.h}!Deque\_Peek\_Front@{Deque\_Peek\_Front}}
\index{Deque\_Peek\_Front@{Deque\_Peek\_Front}!Deque.h@{Deque.h}}
\doxysubsubsection{\texorpdfstring{Deque\_Peek\_Front()}{Deque\_Peek\_Front()}}
{\footnotesize\ttfamily bool Deque\+\_\+\+Peek\+\_\+\+Front (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{Deque_8h_ad99aab737338cb287946d833f4c0337f}{Deque}} \texorpdfstring{$\ast$}{*}}]{dq,  }\item[{\mbox{\hyperlink{structpcb__struct}{PCB}} \texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}}]{payload\+\_\+ptr }\end{DoxyParamCaption})}



Peeks at the element at the front of the deque. 

This function retrieves the element at the front of the deque referenced by the {\ttfamily dq} parameter. On success, the peeked node\textquotesingle{}s payload is returned through the {\ttfamily payload\+\_\+ptr} parameter.


\begin{DoxyParams}{Parameters}
{\em dq} & Pointer to the Deque structure to peek. \\
\hline
{\em payload\+\_\+ptr} & A return parameter; on success, the peeked node\textquotesingle{}s payload is returned through this parameter. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
bool Returns false on failure (e.\+g., the deque is empty), and true on success. 
\end{DoxyReturn}
\Hypertarget{Deque_8h_ad49adcd7fe5724b3dfa14a153dedb6ff}\label{Deque_8h_ad49adcd7fe5724b3dfa14a153dedb6ff} 
\index{Deque.h@{Deque.h}!Deque\_Pop\_Back@{Deque\_Pop\_Back}}
\index{Deque\_Pop\_Back@{Deque\_Pop\_Back}!Deque.h@{Deque.h}}
\doxysubsubsection{\texorpdfstring{Deque\_Pop\_Back()}{Deque\_Pop\_Back()}}
{\footnotesize\ttfamily bool Deque\+\_\+\+Pop\+\_\+\+Back (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{Deque_8h_ad99aab737338cb287946d833f4c0337f}{Deque}} \texorpdfstring{$\ast$}{*}}]{dq,  }\item[{\mbox{\hyperlink{structpcb__struct}{PCB}} \texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}}]{payload\+\_\+ptr }\end{DoxyParamCaption})}



Pops an element from the end of the deque. 

This function pops an element from the end of the deque referenced by the {\ttfamily dq} parameter. On success, the popped node\textquotesingle{}s payload is returned through the {\ttfamily payload\+\_\+ptr} parameter. This is the "{}end"{} version of {\ttfamily Deque\+\_\+\+Pop\+\_\+\+Front}.


\begin{DoxyParams}{Parameters}
{\em dq} & Pointer to the Deque structure to remove from. \\
\hline
{\em payload\+\_\+ptr} & A return parameter; on success, the popped node\textquotesingle{}s payload is returned through this parameter. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
bool Returns false on failure (e.\+g., the deque is empty), and true on success. 
\end{DoxyReturn}
\Hypertarget{Deque_8h_a74629a8f304fe6bf9aa797b6f180ecfa}\label{Deque_8h_a74629a8f304fe6bf9aa797b6f180ecfa} 
\index{Deque.h@{Deque.h}!Deque\_Pop\_Front@{Deque\_Pop\_Front}}
\index{Deque\_Pop\_Front@{Deque\_Pop\_Front}!Deque.h@{Deque.h}}
\doxysubsubsection{\texorpdfstring{Deque\_Pop\_Front()}{Deque\_Pop\_Front()}}
{\footnotesize\ttfamily bool Deque\+\_\+\+Pop\+\_\+\+Front (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{Deque_8h_ad99aab737338cb287946d833f4c0337f}{Deque}} \texorpdfstring{$\ast$}{*}}]{dq,  }\item[{\mbox{\hyperlink{structpcb__struct}{PCB}} \texorpdfstring{$\ast$}{*}\texorpdfstring{$\ast$}{*}}]{payload\+\_\+ptr }\end{DoxyParamCaption})}



Pops an element from the front of the deque. 

This function pops an element from the front of the deque referenced by the {\ttfamily dq} parameter. On success, the popped node\textquotesingle{}s payload is returned through the {\ttfamily payload\+\_\+ptr} parameter.


\begin{DoxyParams}{Parameters}
{\em dq} & Pointer to the Deque structure to pop from. \\
\hline
{\em payload\+\_\+ptr} & A return parameter; on success, the popped node\textquotesingle{}s payload is returned through this parameter. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
bool Returns false on failure (e.\+g., the deque is empty) and true on success. 
\end{DoxyReturn}
\Hypertarget{Deque_8h_ad418721877c1f156176dda9f6512da8c}\label{Deque_8h_ad418721877c1f156176dda9f6512da8c} 
\index{Deque.h@{Deque.h}!Deque\_Pop\_Pcb@{Deque\_Pop\_Pcb}}
\index{Deque\_Pop\_Pcb@{Deque\_Pop\_Pcb}!Deque.h@{Deque.h}}
\doxysubsubsection{\texorpdfstring{Deque\_Pop\_Pcb()}{Deque\_Pop\_Pcb()}}
{\footnotesize\ttfamily bool Deque\+\_\+\+Pop\+\_\+\+Pcb (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{Deque_8h_ad99aab737338cb287946d833f4c0337f}{Deque}} \texorpdfstring{$\ast$}{*}}]{dq,  }\item[{\mbox{\hyperlink{Deque_8h_a26579b27a5163d1424fa4adde69119c6}{Deque\+Node}} \texorpdfstring{$\ast$}{*}}]{pcb }\end{DoxyParamCaption})}



Pops a specified PCB node from the deque. 

This function pops the specified PCB node from the deque referenced by the {\ttfamily dq} parameter.


\begin{DoxyParams}{Parameters}
{\em dq} & Pointer to the Deque structure to pop from. \\
\hline
{\em pcb} & Pointer to the PCB node to pop. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
bool Returns false on failure (e.\+g., the specified PCB node is not found), and true on success. 
\end{DoxyReturn}
\Hypertarget{Deque_8h_add49ac1831d256f03bd8ef64e875fd58}\label{Deque_8h_add49ac1831d256f03bd8ef64e875fd58} 
\index{Deque.h@{Deque.h}!Deque\_Pop\_PID@{Deque\_Pop\_PID}}
\index{Deque\_Pop\_PID@{Deque\_Pop\_PID}!Deque.h@{Deque.h}}
\doxysubsubsection{\texorpdfstring{Deque\_Pop\_PID()}{Deque\_Pop\_PID()}}
{\footnotesize\ttfamily bool Deque\+\_\+\+Pop\+\_\+\+PID (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{Deque_8h_ad99aab737338cb287946d833f4c0337f}{Deque}} \texorpdfstring{$\ast$}{*}}]{dq,  }\item[{pid\+\_\+t}]{pid\+\_\+to\+\_\+pop }\end{DoxyParamCaption})}



Pops an element with a specific PID from the deque. 

This function pops an element with the specified PID from the deque referenced by the {\ttfamily dq} parameter.


\begin{DoxyParams}{Parameters}
{\em dq} & Pointer to the Deque structure to pop from. \\
\hline
{\em pid\+\_\+to\+\_\+pop} & The PID of the element to pop. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
bool Returns false on failure (e.\+g., the deque is empty or the specified PID is not found), and true on success. 
\end{DoxyReturn}
\Hypertarget{Deque_8h_a6d60d3cadeb28a1f88294247bdbaf545}\label{Deque_8h_a6d60d3cadeb28a1f88294247bdbaf545} 
\index{Deque.h@{Deque.h}!Deque\_Push\_Back@{Deque\_Push\_Back}}
\index{Deque\_Push\_Back@{Deque\_Push\_Back}!Deque.h@{Deque.h}}
\doxysubsubsection{\texorpdfstring{Deque\_Push\_Back()}{Deque\_Push\_Back()}}
{\footnotesize\ttfamily void Deque\+\_\+\+Push\+\_\+\+Back (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{Deque_8h_ad99aab737338cb287946d833f4c0337f}{Deque}} \texorpdfstring{$\ast$}{*}}]{dq,  }\item[{\mbox{\hyperlink{structpcb__struct}{PCB}} \texorpdfstring{$\ast$}{*}}]{payload }\end{DoxyParamCaption})}



Pushes a new element to the end of the deque. 

This function pushes a new element with the specified payload to the end of the deque referenced by the {\ttfamily dq} parameter. This is the "{}end"{} version of {\ttfamily Deque\+\_\+\+Push\+\_\+\+Front}.


\begin{DoxyParams}{Parameters}
{\em dq} & Pointer to the Deque structure to push onto. \\
\hline
{\em payload} & Pointer to the payload to push to the end. \\
\hline
\end{DoxyParams}
\Hypertarget{Deque_8h_a4fef2419b522f7aafbd2bb21a9cfa70a}\label{Deque_8h_a4fef2419b522f7aafbd2bb21a9cfa70a} 
\index{Deque.h@{Deque.h}!Deque\_Push\_Front@{Deque\_Push\_Front}}
\index{Deque\_Push\_Front@{Deque\_Push\_Front}!Deque.h@{Deque.h}}
\doxysubsubsection{\texorpdfstring{Deque\_Push\_Front()}{Deque\_Push\_Front()}}
{\footnotesize\ttfamily void Deque\+\_\+\+Push\+\_\+\+Front (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{Deque_8h_ad99aab737338cb287946d833f4c0337f}{Deque}} \texorpdfstring{$\ast$}{*}}]{dq,  }\item[{\mbox{\hyperlink{structpcb__struct}{PCB}} \texorpdfstring{$\ast$}{*}}]{payload }\end{DoxyParamCaption})}



Adds a new element to the front of the Deque. 

This function pushes a new element with the specified payload to the front of the deque referenced by the {\ttfamily dq} parameter.


\begin{DoxyParams}{Parameters}
{\em dq} & Pointer to the Deque structure to push onto. \\
\hline
{\em payload} & Pointer to the payload to push to the front. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
void 
\end{DoxyReturn}
\Hypertarget{Deque_8h_afe8745f820b040a9f8ce5517abb3e57b}\label{Deque_8h_afe8745f820b040a9f8ce5517abb3e57b} 
\index{Deque.h@{Deque.h}!Deque\_Size@{Deque\_Size}}
\index{Deque\_Size@{Deque\_Size}!Deque.h@{Deque.h}}
\doxysubsubsection{\texorpdfstring{Deque\_Size()}{Deque\_Size()}}
{\footnotesize\ttfamily int Deque\+\_\+\+Size (\begin{DoxyParamCaption}\item[{\mbox{\hyperlink{Deque_8h_ad99aab737338cb287946d833f4c0337f}{Deque}} \texorpdfstring{$\ast$}{*}}]{dq }\end{DoxyParamCaption})}



Returns the number of elements in the deque. 

This function returns the number of elements in the deque referenced by the {\ttfamily dq} parameter.


\begin{DoxyParams}{Parameters}
{\em dq} & Pointer to the Deque structure to query. \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
int The size of the deque. 
\end{DoxyReturn}
